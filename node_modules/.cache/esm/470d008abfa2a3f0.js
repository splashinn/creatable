let chalk,execa,fs,gitignore,Listr,ncp,path,projectInstall,license,promisify;_bfa‍.x([["createProject",()=>createProject]]);_bfa‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_bfa‍.w("execa",[["default",["execa"],function(v){execa=v}]]);_bfa‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_bfa‍.w("gitignore",[["default",["gitignore"],function(v){gitignore=v}]]);_bfa‍.w("listr",[["default",["Listr"],function(v){Listr=v}]]);_bfa‍.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_bfa‍.w("path",[["default",["path"],function(v){path=v}]]);_bfa‍.w("pkg-install",[["projectInstall",["projectInstall"],function(v){projectInstall=v}]]);_bfa‍.w("spdx-license-list/licenses/MIT",[["default",["license"],function(v){license=v}]]);_bfa‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);














const access = promisify(fs.access);
const writeFile = promisify(fs.writeFile);
const copy = promisify(ncp);
const writeGitignore = promisify(gitignore.writeFile);

async function copyTemplateFiles(options) {
  return copy(options.templateDirectory, options.targetDirectory, {
    clobber: false,
  });
}

async function createGitignore(options) {
  const file = fs.createWriteStream(
    path.join(options.targetDirectory, '.gitignore'), {
      flags: 'a'
    }
  );
  return writeGitignore({
    type: 'Node',
    file: file,
  });
}

async function createLicense(options) {
  const targetPath = path.join(options.targetDirectory, 'LICENSE');
  const licenseContent = license.licenseText
    .replace('<year>', new Date().getFullYear())
    .replace('<copyright holders>', `${options.name} (${options.email})`);
  return writeFile(targetPath, licenseContent, 'utf8');
}

async function initGit(options) {
  const result = await execa('git', ['init'], {
    cwd: options.targetDirectory,
  });
  if (result.failed) {
    return Promise.reject(new Error('Failed to initialize git'));
  }
  return;
}

       async function createProject(options) {
  options = {
    ...options,
    targetDirectory: options.targetDirectory || process.cwd(),
    email: 'hi@dominik.dev',
    name: 'Dominik Kundel',
  };

  var URL = require('url').URL;

  const templateDir = path.resolve(
    new URL(
      _bfa‍._.meta.url).pathname,
    '../../templates',
    options.template
  );
  options.templateDirectory = templateDir;

  try {
    await access(templateDir, fs.constants.R_OK);
  } catch (err) {
    _bfa‍.g.console.error('%s Invalid template name', chalk.red.bold('ERROR'));
    process.exit(1);
  }

  const tasks = new Listr(
    [{
        title: 'Copy project files',
        task: () => copyTemplateFiles(options),
      },
      {
        title: 'Create gitignore',
        task: () => createGitignore(options),
      },
      {
        title: 'Create License',
        task: () => createLicense(options),
      },
      {
        title: 'Initialize git',
        task: () => initGit(options),
        enabled: () => options.git,
      },
      {
        title: 'Install dependencies',
        task: () =>
          projectInstall({
            cwd: options.targetDirectory,
          }),
        skip: () =>
          !options.runInstall ?
          'Pass --install to automatically install dependencies' : undefined,
      },
    ], {
      exitOnError: false,
    }
  );

  await tasks.run();
  _bfa‍.g.console.log('%s Project ready', chalk.green.bold('DONE'));
  return true;
}